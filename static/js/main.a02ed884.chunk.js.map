{"version":3,"sources":["components/Header.js","api/countriesApi.js","components/CountryCard.js","components/Select.js","components/Main.js","actions/index.js","actions/types.js","components/CountryDetail.js","components/App.js","reducers/countriesReducer.js","reducers/index.js","reducers/countryReducer.js","index.js"],"names":["Header","state","theme","goToMainPage","props","history","push","changeTheme","setState","document","documentElement","setAttribute","toLowerCase","className","onClick","this","style","marginRight","React","Component","withRouter","axios","create","baseURL","CountryCard","redirect","to","country","name","key","backgroundImage","flag","population","toLocaleString","region","capital","Select","selectOpen","toggle","event","changed","target","parentNode","querySelector","classList","contains","remove","add","closest","textContent","onChange","getAttribute","renderOptions","options","map","x","selected","data-value","title","Main","getListFromQuery","query","values","queryString","parse","option","find","fetchCountries","search","searchInput","current","value","onSelectChange","selectedOption","renderCountriesList","countries","findCountries","searchQuery","onUserTypedToInput","keyCode","createRef","location","prevProps","type","placeholder","onKeyUp","ref","compose","connect","dispatch","getState","a","searchType","countriesApi","get","response","payload","data","CountryDetail","onBackButtonClick","goBack","renderBorderCountries","borders","match","params","countryName","fetchCountry","src","alt","nativeName","subregion","topLevelDomain","join","currencies","languages","length","countryFromList","responseCountry","codes","responseCodes","App","padding","path","exact","component","initialState","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render"],"mappings":"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","file":"static/js/main.a02ed884.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass Header extends React.Component {\r\n    state = {theme: 'Dark'};\r\n\r\n    goToMainPage = () => {\r\n        this.props.history.push('/');\r\n    }\r\n    \r\n    changeTheme = () => {\r\n        this.setState({theme: this.state.theme === 'Dark' ? 'Light' : 'Dark'});\r\n        document.documentElement.setAttribute(\"data-theme\", this.state.theme.toLowerCase());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <div className=\"header-wrapper\">\r\n                    <h1 onClick={this.goToMainPage}>Where in the world?</h1>\r\n                    <span onClick={this.changeTheme} className=\"theme-mode\">\r\n                        <i \r\n                            className={this.state.theme === 'Dark' ? \"far fa-moon\" : \"fas fa-moon\"}\r\n                            style={{ marginRight: '7px' }}></i>\r\n                        {`${this.state.theme} Mode`}\r\n                </span>\r\n                </div>\r\n            </header >\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Header);","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://restcountries.eu/rest/v2'\r\n});","import React from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass CountryCard extends React.Component {\r\n    state = {redirect: false};\r\n\r\n    onClick = () => {\r\n        this.setState({redirect: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.redirect === true) {\r\n            return <Redirect push to={`/${this.props.country.name}`} />\r\n        }\r\n\r\n        return (\r\n            <div className=\"country-card\" key={this.props.country.name} onClick={this.onClick}>\r\n                <div className=\"country-card__img\" style={{backgroundImage:  \"url(\" + this.props.country.flag + \")\"}}></div>\r\n                <div className=\"country-card__info-section\">\r\n                    <h3 className=\"country-card__title\">{this.props.country.name}</h3>\r\n                    <span className=\"country-card__info-detail\"><strong>Population:</strong> {this.props.country.population.toLocaleString()}</span>\r\n                    <span className=\"country-card__info-detail\"><strong>Region:</strong> {this.props.country.region}</span>\r\n                    <span className=\"country-card__info-detail\"><strong>Capital:</strong> {this.props.country.capital}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryCard;","import React from 'react';\r\nimport '../styles/select.scss';\r\n\r\nclass Select extends React.Component {\r\n    state = { selectOpen: false }\r\n\r\n    toggle = () => {\r\n        this.setState({ selectOpen: !this.state.selectOpen });\r\n    }\r\n\r\n    // how to do that better?\r\n    onClick = (event) => {\r\n        var changed = false;\r\n\r\n        if (!event.target.parentNode.querySelector('.custom-option.selected')) {\r\n            event.target.classList.add('selected');\r\n            event.target.closest('.custom-select')\r\n                .querySelector('.custom-select__trigger span')\r\n                .textContent = event.target.textContent;\r\n            changed = true;\r\n        } else if (!event.target.classList.contains('selected')) {\r\n            event.target.parentNode.querySelector('.custom-option.selected').classList.remove('selected');\r\n            event.target.classList.add('selected');\r\n            event.target.closest('.custom-select')\r\n                .querySelector('.custom-select__trigger span')\r\n                .textContent = event.target.textContent;\r\n            changed = true;\r\n        }\r\n\r\n        if (changed) {\r\n            this.props.onChange(event.target.getAttribute(\"data-value\"));\r\n        }\r\n    }\r\n\r\n    renderOptions = () => {\r\n        return this.props.options.map(x => {\r\n            return (\r\n                <span\r\n                    className={this.props.selected === x ? \"custom-option selected\" : \"custom-option\"}\r\n                    data-value={x}\r\n                    key={x}\r\n                    onClick={this.onClick}>\r\n                    {x}\r\n                </span>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.toggle} className={this.state.selectOpen ? \"custom-select open\" : \"custom-select\"}>\r\n                <div className=\"custom-select__trigger\">\r\n                    <span>{this.props.selected || this.props.title}</span>\r\n                    <div className=\"arrow\"></div>\r\n                </div>\r\n                <div className=\"custom-options\">\r\n                    {this.renderOptions()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Select;\r\n\r\n","import React, { createRef } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCountries } from \"../actions\";\r\nimport CountryCard from './CountryCard';\r\nimport Select from './Select'\r\nimport queryString from 'query-string'\r\nimport { withRouter } from \"react-router\";\r\nimport { compose } from 'redux';\r\n\r\nclass Main extends React.Component {\r\n    options = ['Africa', 'Americas', 'Europe', 'Asia', 'Oceania'];\r\n    state = { selected: null }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchInput = createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getListFromQuery(this.props.location.search);\r\n    }\r\n\r\n    getListFromQuery = (query) => {\r\n        const values = queryString.parse(query);\r\n        if (values && values.region) {\r\n            const option = this.options.find(x => x.toLowerCase() === values.region.toLowerCase());\r\n            if (option) {\r\n                this.props.fetchCountries('region', option);\r\n                this.setState({ selected: option })\r\n            }\r\n        } else if (values && values.search) {\r\n            this.props.fetchCountries('name', values.search);\r\n            this.searchInput.current.value = values.search;\r\n            this.setState({ selected: null })\r\n        } else {\r\n            this.props.fetchCountries();\r\n            this.setState({ selected: null })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.location.search !== prevProps.location.search) {\r\n            this.getListFromQuery(this.props.location.search);\r\n        }\r\n    }\r\n\r\n    onSelectChange = (selectedOption) => {\r\n        this.props.history.push(`/?region=${selectedOption}`);\r\n        this.searchInput.current.value = '';\r\n    }\r\n\r\n    renderCountriesList = () => {\r\n        return this.props.countries.map(country =>\r\n            <CountryCard country={country} key={country.name} />\r\n        );\r\n    }\r\n\r\n    findCountries = () => {\r\n        const searchQuery = this.searchInput.current.value;\r\n        if (searchQuery) {\r\n            this.props.history.push(`/?search=${searchQuery}`);\r\n        }\r\n    }\r\n\r\n    onUserTypedToInput = (event) => {\r\n        if (event.keyCode === 13) {\r\n            this.findCountries();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-wrapper\">\r\n                <div className=\"search-filter-menu\">\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"search\" placeholder=\"Search for a country...\"\r\n                            onKeyUp={this.onUserTypedToInput} ref={this.searchInput} />\r\n                        <i className=\"fas fa-search\" onClick={this.findCountries}></i>\r\n                    </div>\r\n                    <div className=\"custom-select-wrapper\">\r\n                        <Select options={this.options} title='Filter by Region'\r\n                            onChange={this.onSelectChange} selected={this.state.selected} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"countries-list\">\r\n                    {this.renderCountriesList()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { \r\n        countries: state.countries.countries,\r\n    };\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, { fetchCountries })\r\n)(Main);","import { FETCH_COUNTRIES, FETCH_COUNTRY } from './types';\r\nimport countriesApi from '../api/countriesApi'\r\n\r\nexport const fetchCountries = (type, query)  => async (dispatch, getState) => {\r\n    const state = getState();\r\n    if(state.countries.searchType === type && state.countries.searchQuery === query) {\r\n        return;\r\n    }\r\n    \r\n    let response;\r\n    if(!query || !type) {\r\n        response = await countriesApi.get('/all');\r\n    } else if (type === 'region') {\r\n        response = await countriesApi.get(`/region/${query}`);\r\n    } else if (type === 'name') {\r\n        response = await countriesApi.get(`/name/${query}`);\r\n    }\r\n\r\n    dispatch({\r\n        type: FETCH_COUNTRIES,\r\n        payload: {\r\n            searchType: type,\r\n            searchQuery: query,\r\n            countries: response.data,\r\n        }\r\n    });\r\n};\r\n\r\nexport const fetchCountry = name => async (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    // check if current country is already in store\r\n    if(state.country && state.country.name === name)\r\n        return;\r\n\r\n    dispatch({\r\n        type: FETCH_COUNTRY,\r\n        payload: null\r\n    });\r\n\r\n    // check if current country is already in list of countries in store\r\n    let country;\r\n    const countryFromList = state.countries.countries.find(x => x.name === name);\r\n    if(countryFromList) {\r\n        country = {...countryFromList}\r\n    } else {\r\n        const responseCountry = await countriesApi.get(`/name/${name}`);\r\n        country = responseCountry.data[0];\r\n    }\r\n\r\n    // fetch full country names for border badges\r\n    const borders = country.borders;\r\n    if (borders && borders.length > 0) {\r\n        const codes = borders.join(';');\r\n        const responseCodes = await countriesApi.get(`/alpha?codes=${codes}`);\r\n        country.borders = responseCodes.data.map(x => x.name)\r\n    }\r\n\r\n    dispatch({\r\n        type: FETCH_COUNTRY,\r\n        payload: country\r\n    });\r\n};","export const FETCH_COUNTRIES = 'FETCH_COUNTRIES';\r\nexport const SEARCH_COUNTRIES = 'SEARCH_COUNTRIES';\r\nexport const FETCH_COUNTRY = 'FETCH_COUNTRY';\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { fetchCountry } from '../actions'\r\n\r\nclass CountryDetail extends React.Component {\r\n    componentDidMount() {\r\n        const name = this.props.match.params.countryName;\r\n        this.props.fetchCountry(name);\r\n    }\r\n\r\n    onBackButtonClick = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    renderBorderCountries = () => {\r\n        return this.props.country.borders.map(x => {\r\n            return <span className=\"border-badge\" key={x}>{x}</span>;\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.country) {\r\n            return <div>No country</div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"country-details-wrapper\">\r\n                <button className=\"back-button\" onClick={this.onBackButtonClick}>\r\n                    <i className=\"fas fa-arrow-left\"></i>\r\n                    Back\r\n                </button>\r\n\r\n                <div className=\"country-details\">\r\n                    <div className=\"country-details__img-container\">\r\n                        <img src={this.props.country.flag} alt={`Flag of ${this.props.country.name}`} />\r\n                    </div>\r\n                    <div className=\"country-details__right-section\">\r\n                        <h1 className=\"country-details__title\">{this.props.country.name}</h1>\r\n                        <div className=\"country-details__info-container\">\r\n                            <div className=\"country-details__general-info\">\r\n                                <span className=\"country-details__info-item\">\r\n                                    <strong>Native Name: </strong>{this.props.country.nativeName}\r\n                                </span>                            \r\n                                <span className=\"country-details__info-item\">\r\n                                    <strong>Population: </strong>{this.props.country.population.toLocaleString()}\r\n                                </span>                            \r\n                                <span className=\"country-details__info-item\">\r\n                                    <strong>Region: </strong>{this.props.country.region}\r\n                                </span>           \r\n                                <span className=\"country-details__info-item\">\r\n                                    <strong>Sub Region: </strong>{this.props.country.subregion}\r\n                                </span>\r\n                                <span className=\"country-details__info-item\">\r\n                                    <strong>Capital: </strong>{this.props.country.capital}\r\n                                </span>\r\n                            </div>\r\n\r\n                            <div className=\"country-details__secondary-info\">\r\n                                <span className=\"country-details__info-item\">\r\n                                    <strong>Top Level Domain: </strong>{this.props.country.topLevelDomain.join(', ')}\r\n                                </span>\r\n                                <span className=\"country-details__info-item\">\r\n                                    <strong>Currencies: </strong>{ this.props.country.currencies.map(x => x.name).join(', ')}\r\n                                </span>                                \r\n                                <span className=\"country-details__info-item\">\r\n                                    <strong>Languages: </strong>{this.props.country.languages.map(x => x.name).join(', ')}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            this.props.country.borders && this.props.country.borders.length > 0  ?\r\n                            <div className=\"country-details__border-countries-container\">\r\n                                <div className=\"country-details__border-countries\">\r\n                                    <strong>Border&nbsp;Countries:&nbsp;</strong>\r\n                                </div>\r\n                                <div className=\"country-details__badges\">\r\n                                    {this.renderBorderCountries()}\r\n                                </div>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { country: state.country };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchCountry })(CountryDetail);","import React from 'react'\r\nimport { Route, HashRouter } from 'react-router-dom'\r\n\r\nimport Header from './Header'\r\nimport Main from './Main';\r\nimport CountryDetail from './CountryDetail';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <HashRouter>\r\n                <Header />\r\n                <main>\r\n                    <div style={{ padding: '0 20px' }}>\r\n                        <Route path=\"/\" exact component={Main} />\r\n                        <Route path=\"/:countryName\" component={CountryDetail} />\r\n                    </div>\r\n                </main>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import { FETCH_COUNTRIES } from '../actions/types'\r\n\r\nconst initialState = {\r\n    searchType: null,\r\n    searchQuery: null,\r\n    countries: []\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case FETCH_COUNTRIES:\r\n            return { \r\n                searchType: action.payload.searchType,\r\n                searchQuery: action.payload.searchQuery,\r\n                countries: action.payload.countries,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport countriesReducer from './countriesReducer';\r\nimport countryReducer from './countryReducer';\r\n\r\nexport default combineReducers({\r\n    countries: countriesReducer,\r\n    country: countryReducer\r\n});","import { FETCH_COUNTRY } from '../actions/types'\r\n\r\nexport default (state = null, action) => {\r\n    switch(action.type) {\r\n        case FETCH_COUNTRY:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './components/App'\r\nimport './styles/style.scss'\r\nimport reducers from './reducers'\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}