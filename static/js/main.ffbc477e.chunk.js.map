{"version":3,"sources":["components/Header.js","api/countriesApi.js","actions/index.js","actions/types.js","components/SearchInput.js","components/CountryCard.js","components/Select.js","components/Main.js","components/useCountry.js","components/CountryDetail.js","components/App.js","reducers/countriesReducer.js","reducers/index.js","reducers/countryReducer.js","index.js"],"names":["Header","useState","theme","setTheme","history","useHistory","className","onClick","push","document","documentElement","setAttribute","toLowerCase","axios","create","baseURL","fetchCountries","type","query","dispatch","getState","a","state","countries","searchType","searchQuery","countriesApi","get","response","payload","data","SearchInput","text","onChange","textInput","setTextInput","debouncedOnChange","useCallback","_","debounce","useEffect","placeholder","e","target","value","trim","CountryCard","country","key","name","style","backgroundImage","flag","population","toLocaleString","region","capital","Select","options","title","selected","selectOpen","setSelectOpen","selectedOption","setSelectedOption","classNames","open","map","option","Main","setSelected","inputValue","setInputValue","search","useLocation","useDispatch","useSelector","getListFromQuery","values","queryString","parse","find","x","val","useCountry","countryName","useParams","countryFromList","responseCountry","borders","length","codes","join","responseCodes","CountryDetailInfo","info","CountryDetail","goBack","src","alt","nativeName","subregion","topLevelDomain","currencies","languages","borderCountry","App","path","exact","component","initialState","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.ffbc477e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from \"react-router\";\n\nconst Header = () => {\n    const [theme, setTheme] = useState('Dark');\n    const history = useHistory();\n\n    const changeTheme = () => {\n        setTheme(theme === 'Dark' ? 'Light' : 'Dark');\n        document.documentElement.setAttribute(\"data-theme\", theme.toLowerCase());\n    }\n\n    return (\n        <header className=\"header flex-row\">\n            <div className=\"flex-row flex-row--space-between container\">\n                <h1 className=\"heading header__title\" onClick={() => history.push('/')}>Where in the world?</h1>\n                <span onClick={changeTheme} className=\"theme-mode\">\n                    <i className={theme === 'Dark' ? \"far fa-moon\" : \"fas fa-moon\"} />\n                    {`${theme} Mode`}\n                </span>\n            </div>\n        </header >\n    );\n}\n\nexport default Header;","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://restcountries.com/v2'\n});","import { FETCH_COUNTRIES, FETCH_COUNTRY } from './types';\nimport countriesApi from '../api/countriesApi'\n\nexport const fetchCountries = (type, query)  => async (dispatch, getState) => {\n    const state = getState();\n    if(state.countries.searchType === type && state.countries.searchQuery === query) {\n        return;\n    }\n    \n    let response;\n    try {\n        if(!query || !type) {\n            response = await countriesApi.get('/all');\n        } else if (type === 'region') {\n            response = await countriesApi.get(`/region/${query}`);\n        } else if (type === 'name') {\n            response = await countriesApi.get(`/name/${query}`);\n        }\n    \n        dispatch({\n            type: FETCH_COUNTRIES,\n            payload: {\n                searchType: type,\n                searchQuery: query,\n                countries: response.data,\n            }\n        });\n    } catch {\n        dispatch({\n            type: FETCH_COUNTRIES,\n            payload: {\n                searchType: type,\n                searchQuery: query,\n                countries: null,\n            }\n        });\n    }\n\n};\n\nexport const fetchCountry = name => async (dispatch, getState) => {\n    const state = getState();\n\n    // check if current country is already in store\n    if(state.country && state.country.name === name)\n        return;\n\n    dispatch({\n        type: FETCH_COUNTRY,\n        payload: null\n    });\n\n    // check if current country is already in list of countries in store\n    let country;\n    const countryFromList = state.countries.countries.find(x => x.name === name);\n    if(countryFromList) {\n        country = {...countryFromList}\n    } else {\n        try {\n            const responseCountry = await countriesApi.get(`/name/${name}`);\n            country = responseCountry.data[0];\n        } catch {\n            return;\n        }\n    }\n\n    // fetch full country names for border badges\n    const borders = country.borders;\n    if (borders && borders.length > 0) {\n        const codes = borders.join(';');\n        const responseCodes = await countriesApi.get(`/alpha?codes=${codes}`);\n        country.borders = responseCodes.data.map(x => x.name)\n    }\n\n    dispatch({\n        type: FETCH_COUNTRY,\n        payload: country\n    });\n};","export const FETCH_COUNTRIES = 'FETCH_COUNTRIES';\nexport const FETCH_COUNTRY = 'FETCH_COUNTRY';\n","import _ from 'lodash'\nimport React, { useEffect, useCallback, useState } from 'react'\n\nconst SearchInput = ({text, onChange}) => {\n    const [textInput, setTextInput] = useState('')\n    const debouncedOnChange = useCallback(\n        _.debounce(onChange, 500),\n        [onChange]\n    )\n\n    useEffect(() => {\n        setTextInput(text)\n    }, [text])\n \n    const handleTextChange = (e) => {\n        setTextInput(e.target.value);\n        debouncedOnChange(e.target.value.trim())\n    };\n\n    return (\n        <input type=\"search\" placeholder=\"Search for a country...\"\n            onChange={handleTextChange} value={textInput} />\n    );\n}\n\nexport default SearchInput;","import React from 'react'\nimport { useHistory } from 'react-router-dom';\n\nimport '../styles/country-card.scss';\n\nconst CountryCard = ({ country }) => {\n    const history = useHistory()\n\n    return (\n        <div className=\"country-card\" key={country.name} onClick={() =>  history.push(`/${country.name}`)}>\n            <div className=\"country-card__img\" style={{ backgroundImage: `url(${country.flag})` }}></div>\n            <div className=\"country-card__info-section\">\n                <h3 className=\"heading heading--h3 country-card__title\">{country.name}</h3>\n                <span className=\"country-card__info-detail\"><strong>Population:</strong> {country.population.toLocaleString()}</span>\n                <span className=\"country-card__info-detail\"><strong>Region:</strong> {country.region}</span>\n                <span className=\"country-card__info-detail\"><strong>Capital:</strong> {country.capital}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default CountryCard;","import React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport classNames from 'classnames'\n\nimport '../styles/select.scss';\n\nconst Select = ({options, title, onChange, selected}) => {\n    const [selectOpen, setSelectOpen] = useState(false)\n    const [selectedOption, setSelectedOption] = useState(null)\n\n    useEffect(() => {\n        setSelectedOption(selected)\n    }, [selected])\n\n    const onClick = (option) => {\n        setSelectedOption(option)\n        onChange(option);\n    }\n\n    const renderOptions = () => {\n        return options.map(option => {\n            return (\n                <span\n                    className={classNames('custom-option', {selected: selected === option})}\n                    key={option}\n                    onClick={() => onClick(option)}>\n                    {option}\n                </span>\n            )\n        })\n    }\n\n    return (\n        <div onClick={() => setSelectOpen(!selectOpen)} className={classNames('custom-select', {open: selectOpen})}>\n            <div className=\"custom-select__trigger\">\n                <span>{selectedOption || title}</span>\n                <div className=\"arrow\"></div>\n            </div>\n            <div className=\"custom-options\">\n                {renderOptions()}\n            </div>\n        </div>\n    );\n}\n\nexport default Select;\n\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useHistory } from \"react-router\";\nimport queryString from 'query-string'\n\nimport { fetchCountries } from \"../actions\";\nimport SearchInput from './SearchInput'\nimport CountryCard from './CountryCard';\nimport Select from './Select'\n\nconst Main = () => {\n    // for state\n    const options = ['Africa', 'Americas', 'Europe', 'Asia', 'Oceania'];\n    const [selected, setSelected] = useState(null)\n    const [inputValue, setInputValue] = useState('')\n\n    // for routing\n    const { search } = useLocation();\n    const history = useHistory();\n\n    // for store\n    const dispatch = useDispatch();\n    const countries = useSelector(state => state.countries.countries)\n\n    useEffect(() => {\n        getListFromQuery(search);\n    }, [search])\n\n    const getListFromQuery = (query) => {\n        const values = queryString.parse(query);\n\n        if (values && values.region) {\n            const option = options.find(x => x.toLowerCase() === values.region.toLowerCase());\n            if (option) {\n                dispatch(fetchCountries('region', option))\n                setSelected(option);\n            }\n        } else if (values && values.search) {\n            dispatch(fetchCountries('name', values.search))\n            setInputValue(values.search)\n            setSelected(null)\n        } else {\n            dispatch(fetchCountries())\n            setSelected(null)\n        }\n    }\n    \n    const findCountries = (val) => {\n        history.push(val ? `/?search=${val}` : '/')\n    }\n\n    const onSelectChange = (selectedOption) => {\n        history.push(`/?region=${selectedOption}`);\n        setInputValue('')\n    }\n\n    const renderCountriesList = () => {\n        if (countries) {\n            return countries.map(country =>\n                <CountryCard country={country} key={country.name} />\n            );\n        } else {\n            return <div>No countres found</div>\n        }\n    }\n\n    return (\n        <div className=\"main-wrapper\">\n            <div className=\"search-filter-menu\">\n                <div className=\"input-wrapper\">\n                    <SearchInput onChange={findCountries} text={inputValue} />\n                    <i className=\"fas fa-search\" />\n                </div>\n                <div className=\"custom-select-wrapper\">\n                    <Select options={options} title='Filter by Region'\n                        onChange={onSelectChange} selected={selected} />\n                </div>\n            </div>\n\n            <div className=\"countries-list\">\n                {renderCountriesList()}\n            </div>\n        </div>\n    );\n}\n\nexport default Main;","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { fetchCountry } from '../actions';\n\nconst useCountry = () => {\n    const { countryName } = useParams();\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(fetchCountry(countryName))\n    }, [countryName])\n}\n\nexport default useCountry;","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport '../styles/country-details.scss';\nimport useCountry from './useCountry';\n\nconst CountryDetail = () => {\n    const country = useSelector(state => state.country)\n    const history = useHistory();\n    useCountry();\n\n    const onBackButtonClick = () => {\n        history.goBack();\n    }\n\n    const onBadgeClick = (countryName) => {\n        history.push(`/${countryName}`);\n    }\n\n    const renderBorderCountries = () => {\n        return country.borders.map(borderCountry => {\n            return (\n                <button\n                    className=\"border-button badge\"\n                    onClick={() => onBadgeClick(borderCountry)}\n                    key={borderCountry}>\n                    {borderCountry}\n                </button>\n            )\n        })\n    }\n\n    if (!country) {\n        return <div>No country</div>;\n    } else {\n        return (\n            <div className=\"country-details-wrapper\">\n                <button className=\"back-button badge\" onClick={onBackButtonClick}>\n                    <i className=\"fas fa-arrow-left\"></i>\n                    Back\n                </button>\n\n                <div className=\"country-details\">\n                    <div className=\"country-details__img-container\">\n                        <img src={country.flag} alt={`Flag of ${country.name}`} />\n                    </div>\n                    <div className=\"country-details__right-section\">\n                        <h1 className=\"heading heading--h1 country-details__title\">{country.name}</h1>\n                        <div className=\"country-details__info-container\">\n                            <div className=\"country-details__general-info\">\n                                <CountryDetailInfo title=\"Native Name\" info={country.nativeName} />\n                                <CountryDetailInfo title=\"Population\" info={country.population.toLocaleString()} />\n                                <CountryDetailInfo title=\"Region\" info={country.region} />\n                                <CountryDetailInfo title=\"Sub Region\" info={country.subregion} />\n                                <CountryDetailInfo title=\"Capital\" info={country.capital} />\n                            </div>\n                            <div className=\"country-details__secondary-info\">\n                                <CountryDetailInfo title=\"Top Level Domain\" info={country.topLevelDomain.join(', ')} />\n                                <CountryDetailInfo title=\"Currencies\" info={country.currencies.map(x => x.name).join(', ')} />\n                                <CountryDetailInfo title=\"Languages\" info={country.languages.map(x => x.name).join(', ')} />\n                            </div>\n                        </div>\n                        {\n                            (country.borders && country.borders.length > 0) &&\n                            <div className=\"country-details__border-countries-container\">\n                                <div className=\"country-details__border-countries\">\n                                    <strong>Border&nbsp;Countries:&nbsp;</strong>\n                                </div>\n                                <div className=\"country-details__badges\">\n                                    {renderBorderCountries()}\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst CountryDetailInfo = ({title, info}) => {\n    return (\n        <span className=\"country-details__info-item\">\n            <strong>{title}: </strong>{info}\n        </span>\n    )\n}\n\nexport default CountryDetail;","import React from 'react'\nimport { Route, HashRouter } from 'react-router-dom'\n\nimport Header from './Header'\nimport Main from './Main';\nimport CountryDetail from './CountryDetail';\n\nconst App = () => {\n    return (\n        <div className=\"wrapper\">\n            <HashRouter>\n                <Header />\n                <main className=\"main\">\n                    <div className=\"app-container\">\n                        <Route path=\"/\" exact component={Main} />\n                        <Route path=\"/:countryName\" component={CountryDetail} />\n                    </div>\n                </main>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;","import { FETCH_COUNTRIES } from '../actions/types'\n\nconst initialState = {\n    searchType: null,\n    searchQuery: null,\n    countries: []\n}\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case FETCH_COUNTRIES:\n            return { \n                searchType: action.payload.searchType,\n                searchQuery: action.payload.searchQuery,\n                countries: action.payload.countries,\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport countriesReducer from './countriesReducer';\nimport countryReducer from './countryReducer';\n\nexport default combineReducers({\n    countries: countriesReducer,\n    country: countryReducer\n});","import { FETCH_COUNTRY } from '../actions/types'\n\nexport default (state = null, action) => {\n    switch(action.type) {\n        case FETCH_COUNTRY:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App'\nimport './styles/style.scss'\nimport reducers from './reducers'\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}